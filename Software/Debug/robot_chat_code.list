
robot_chat_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002818  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002954  08002954  00012954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002a04  08002a04  00012a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  08002a08  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000074  20000014  08002a14  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000088  08002a14  00020088  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c285  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e9e  00000000  00000000  0002c30c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001178  00000000  00000000  0002e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d33  00000000  00000000  0002f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00002b3f  00000000  00000000  0003005b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e361  00000000  00000000  00032b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d36f1  00000000  00000000  00040efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004838  00000000  00000000  001145ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000073  00000000  00000000  00118e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	0800293c 	.word	0x0800293c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	0800293c 	.word	0x0800293c

0800017c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000188:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800018a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	4313      	orrs	r3, r2
 8000192:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000198:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4013      	ands	r3, r2
 800019e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001a0:	68fb      	ldr	r3, [r7, #12]
}
 80001a2:	bf00      	nop
 80001a4:	3714      	adds	r7, #20
 80001a6:	46bd      	mov	sp, r7
 80001a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ac:	4770      	bx	lr

080001ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ae:	b580      	push	{r7, lr}
 80001b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b2:	f000 fa01 	bl	80005b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b6:	f000 f807 	bl	80001c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001ba:	f000 f85d 	bl	8000278 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001be:	f000 f8b7 	bl	8000330 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c2:	f000 f877 	bl	80002b4 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c6:	e7fe      	b.n	80001c6 <main+0x18>

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b09a      	sub	sp, #104	; 0x68
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0320 	add.w	r3, r7, #32
 80001d2:	2248      	movs	r2, #72	; 0x48
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fb84 	bl	80028e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]
 80001ea:	615a      	str	r2, [r3, #20]
 80001ec:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001ee:	4b21      	ldr	r3, [pc, #132]	; (8000274 <SystemClock_Config+0xac>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001f6:	4a1f      	ldr	r2, [pc, #124]	; (8000274 <SystemClock_Config+0xac>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	4b1d      	ldr	r3, [pc, #116]	; (8000274 <SystemClock_Config+0xac>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000206:	603b      	str	r3, [r7, #0]
 8000208:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 800020a:	2322      	movs	r3, #34	; 0x22
 800020c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000212:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000214:	2301      	movs	r3, #1
 8000216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000218:	2340      	movs	r3, #64	; 0x40
 800021a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800021c:	2300      	movs	r3, #0
 800021e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000220:	2360      	movs	r3, #96	; 0x60
 8000222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000224:	2300      	movs	r3, #0
 8000226:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000228:	f107 0320 	add.w	r3, r7, #32
 800022c:	4618      	mov	r0, r3
 800022e:	f001 f94b 	bl	80014c8 <HAL_RCC_OscConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000238:	f000 f881 	bl	800033e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800023c:	236f      	movs	r3, #111	; 0x6f
 800023e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000244:	2300      	movs	r3, #0
 8000246:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fca7 	bl	8001bb0 <HAL_RCC_ClockConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000268:	f000 f869 	bl	800033e <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3768      	adds	r7, #104	; 0x68
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	58000400 	.word	0x58000400

08000278 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b094      	sub	sp, #80	; 0x50
 800027c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800027e:	463b      	mov	r3, r7
 8000280:	2250      	movs	r2, #80	; 0x50
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f002 fb2d 	bl	80028e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800028a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800028e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000290:	2300      	movs	r3, #0
 8000292:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000294:	2310      	movs	r3, #16
 8000296:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000298:	463b      	mov	r3, r7
 800029a:	4618      	mov	r0, r3
 800029c:	f002 f89b 	bl	80023d6 <HAL_RCCEx_PeriphCLKConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80002a6:	f000 f84a 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80002aa:	bf00      	nop
 80002ac:	3750      	adds	r7, #80	; 0x50
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <MX_I2C1_Init+0x74>)
 80002ba:	4a1c      	ldr	r2, [pc, #112]	; (800032c <MX_I2C1_Init+0x78>)
 80002bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <MX_I2C1_Init+0x74>)
 80002c0:	f640 6214 	movw	r2, #3604	; 0xe14
 80002c4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002c6:	4b18      	ldr	r3, [pc, #96]	; (8000328 <MX_I2C1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002cc:	4b16      	ldr	r3, [pc, #88]	; (8000328 <MX_I2C1_Init+0x74>)
 80002ce:	2201      	movs	r2, #1
 80002d0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <MX_I2C1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002d8:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002de:	4b12      	ldr	r3, [pc, #72]	; (8000328 <MX_I2C1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <MX_I2C1_Init+0x74>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <MX_I2C1_Init+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f0:	480d      	ldr	r0, [pc, #52]	; (8000328 <MX_I2C1_Init+0x74>)
 80002f2:	f000 fc3b 	bl	8000b6c <HAL_I2C_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80002fc:	f000 f81f 	bl	800033e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000300:	2100      	movs	r1, #0
 8000302:	4809      	ldr	r0, [pc, #36]	; (8000328 <MX_I2C1_Init+0x74>)
 8000304:	f000 fccd 	bl	8000ca2 <HAL_I2CEx_ConfigAnalogFilter>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800030e:	f000 f816 	bl	800033e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000312:	2100      	movs	r1, #0
 8000314:	4804      	ldr	r0, [pc, #16]	; (8000328 <MX_I2C1_Init+0x74>)
 8000316:	f000 fd0f 	bl	8000d38 <HAL_I2CEx_ConfigDigitalFilter>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000320:	f000 f80d 	bl	800033e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000030 	.word	0x20000030
 800032c:	40005400 	.word	0x40005400

08000330 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	2002      	movs	r0, #2
 8000336:	f7ff ff21 	bl	800017c <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}

0800033e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000342:	b672      	cpsid	i
}
 8000344:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000346:	e7fe      	b.n	8000346 <Error_Handler+0x8>

08000348 <LL_AHB2_GRP1_EnableClock>:
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000356:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000364:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4013      	ands	r3, r2
 800036a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800036c:	68fb      	ldr	r3, [r7, #12]
}
 800036e:	bf00      	nop
 8000370:	3714      	adds	r7, #20
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800037a:	b480      	push	{r7}
 800037c:	b085      	sub	sp, #20
 800037e:	af00      	add	r7, sp, #0
 8000380:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000386:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4313      	orrs	r3, r2
 8000390:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000396:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4013      	ands	r3, r2
 800039c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800039e:	68fb      	ldr	r3, [r7, #12]
}
 80003a0:	bf00      	nop
 80003a2:	3714      	adds	r7, #20
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
	...

080003bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b09c      	sub	sp, #112	; 0x70
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
 80003d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003d4:	f107 030c 	add.w	r3, r7, #12
 80003d8:	2250      	movs	r2, #80	; 0x50
 80003da:	2100      	movs	r1, #0
 80003dc:	4618      	mov	r0, r3
 80003de:	f002 fa81 	bl	80028e4 <memset>
  if(hi2c->Instance==I2C1)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a17      	ldr	r2, [pc, #92]	; (8000444 <HAL_I2C_MspInit+0x88>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d126      	bne.n	800043a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003ec:	2304      	movs	r3, #4
 80003ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80003f0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80003f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80003f6:	f107 030c 	add.w	r3, r7, #12
 80003fa:	4618      	mov	r0, r3
 80003fc:	f001 ffeb 	bl	80023d6 <HAL_RCCEx_PeriphCLKConfig>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000406:	f7ff ff9a 	bl	800033e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800040a:	2002      	movs	r0, #2
 800040c:	f7ff ff9c 	bl	8000348 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000410:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000414:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000416:	2312      	movs	r3, #18
 8000418:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2300      	movs	r3, #0
 8000420:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000422:	2304      	movs	r3, #4
 8000424:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000426:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800042a:	4619      	mov	r1, r3
 800042c:	4806      	ldr	r0, [pc, #24]	; (8000448 <HAL_I2C_MspInit+0x8c>)
 800042e:	f000 fa2d 	bl	800088c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000432:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000436:	f7ff ffa0 	bl	800037a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800043a:	bf00      	nop
 800043c:	3770      	adds	r7, #112	; 0x70
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40005400 	.word	0x40005400
 8000448:	48000400 	.word	0x48000400

0800044c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <NMI_Handler+0x4>

08000452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000456:	e7fe      	b.n	8000456 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	e7fe      	b.n	800045c <MemManage_Handler+0x4>

0800045e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800045e:	b480      	push	{r7}
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000462:	e7fe      	b.n	8000462 <BusFault_Handler+0x4>

08000464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000468:	e7fe      	b.n	8000468 <UsageFault_Handler+0x4>

0800046a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000498:	f000 f8e8 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <SystemInit+0x98>)
 80004a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004aa:	4a23      	ldr	r2, [pc, #140]	; (8000538 <SystemInit+0x98>)
 80004ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80004cc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80004ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <SystemInit+0x9c>)
 80004da:	4013      	ands	r3, r2
 80004dc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80004de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004ea:	f023 0305 	bic.w	r3, r3, #5
 80004ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80004f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80004fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80004fe:	f023 0301 	bic.w	r3, r3, #1
 8000502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800050a:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <SystemInit+0xa0>)
 800050c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800050e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <SystemInit+0xa0>)
 8000514:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000520:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000524:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	e000ed00 	.word	0xe000ed00
 800053c:	faf6fefb 	.word	0xfaf6fefb
 8000540:	22041000 	.word	0x22041000

08000544 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000544:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000546:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000548:	3304      	adds	r3, #4

0800054a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800054a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800054e:	d3f9      	bcc.n	8000544 <CopyDataInit>
  bx lr
 8000550:	4770      	bx	lr

08000552 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000552:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000554:	3004      	adds	r0, #4

08000556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000556:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000558:	d3fb      	bcc.n	8000552 <FillZerobss>
  bx lr
 800055a:	4770      	bx	lr

0800055c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800055c:	480c      	ldr	r0, [pc, #48]	; (8000590 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800055e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000560:	f7ff ff9e 	bl	80004a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000564:	480b      	ldr	r0, [pc, #44]	; (8000594 <LoopForever+0x6>)
 8000566:	490c      	ldr	r1, [pc, #48]	; (8000598 <LoopForever+0xa>)
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <LoopForever+0xe>)
 800056a:	2300      	movs	r3, #0
 800056c:	f7ff ffed 	bl	800054a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8000570:	480b      	ldr	r0, [pc, #44]	; (80005a0 <LoopForever+0x12>)
 8000572:	490c      	ldr	r1, [pc, #48]	; (80005a4 <LoopForever+0x16>)
 8000574:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <LoopForever+0x1a>)
 8000576:	2300      	movs	r3, #0
 8000578:	f7ff ffe7 	bl	800054a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800057c:	480b      	ldr	r0, [pc, #44]	; (80005ac <LoopForever+0x1e>)
 800057e:	490c      	ldr	r1, [pc, #48]	; (80005b0 <LoopForever+0x22>)
 8000580:	2300      	movs	r3, #0
 8000582:	f7ff ffe8 	bl	8000556 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000586:	f002 f9b5 	bl	80028f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800058a:	f7ff fe10 	bl	80001ae <main>

0800058e <LoopForever>:

LoopForever:
  b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   r0, =_estack
 8000590:	20010000 	.word	0x20010000
  INIT_DATA _sdata, _edata, _sidata
 8000594:	20000008 	.word	0x20000008
 8000598:	20000014 	.word	0x20000014
 800059c:	08002a08 	.word	0x08002a08
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80005a0:	20030000 	.word	0x20030000
 80005a4:	20030000 	.word	0x20030000
 80005a8:	08002a14 	.word	0x08002a14
  INIT_BSS _sbss, _ebss
 80005ac:	20000014 	.word	0x20000014
 80005b0:	20000088 	.word	0x20000088

080005b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b4:	e7fe      	b.n	80005b4 <ADC1_IRQHandler>
	...

080005b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <HAL_Init+0x3c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_Init+0x3c>)
 80005c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f000 f92a 	bl	8000828 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d4:	200f      	movs	r0, #15
 80005d6:	f000 f80f 	bl	80005f8 <HAL_InitTick>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80005e0:	2301      	movs	r3, #1
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	e001      	b.n	80005ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005e6:	f7ff fee1 	bl	80003ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	58004000 	.word	0x58004000

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_InitTick+0x6c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d024      	beq.n	8000656 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800060c:	f001 fc7e 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8000610:	4602      	mov	r2, r0
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_InitTick+0x6c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	4619      	mov	r1, r3
 8000618:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000620:	fbb2 f3f3 	udiv	r3, r2, r3
 8000624:	4618      	mov	r0, r3
 8000626:	f000 f924 	bl	8000872 <HAL_SYSTICK_Config>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d10f      	bne.n	8000650 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2b0f      	cmp	r3, #15
 8000634:	d809      	bhi.n	800064a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000636:	2200      	movs	r2, #0
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	f000 f8fe 	bl	800083e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000642:	4a09      	ldr	r2, [pc, #36]	; (8000668 <HAL_InitTick+0x70>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	e007      	b.n	800065a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800064a:	2301      	movs	r3, #1
 800064c:	73fb      	strb	r3, [r7, #15]
 800064e:	e004      	b.n	800065a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	e001      	b.n	800065a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800065a:	7bfb      	ldrb	r3, [r7, #15]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000010 	.word	0x20000010
 8000668:	2000000c 	.word	0x2000000c

0800066c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000010 	.word	0x20000010
 8000690:	20000084 	.word	0x20000084

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000084 	.word	0x20000084

080006ac <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <HAL_GetTickPrio+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000000c 	.word	0x2000000c

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007f4:	d301      	bcc.n	80007fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007f6:	2301      	movs	r3, #1
 80007f8:	e00f      	b.n	800081a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <SysTick_Config+0x40>)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000802:	210f      	movs	r1, #15
 8000804:	f04f 30ff 	mov.w	r0, #4294967295
 8000808:	f7ff ff8e 	bl	8000728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <SysTick_Config+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SysTick_Config+0x40>)
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	e000e010 	.word	0xe000e010

08000828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff ff47 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800084c:	f7ff ff5e 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000850:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	6978      	ldr	r0, [r7, #20]
 8000858:	f7ff ff90 	bl	800077c <NVIC_EncodePriority>
 800085c:	4602      	mov	r2, r0
 800085e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff ff5f 	bl	8000728 <__NVIC_SetPriority>
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ffb2 	bl	80007e4 <SysTick_Config>
 8000880:	4603      	mov	r3, r0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089a:	e14c      	b.n	8000b36 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	2101      	movs	r1, #1
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	fa01 f303 	lsl.w	r3, r1, r3
 80008a8:	4013      	ands	r3, r2
 80008aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f000 813e 	beq.w	8000b30 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	f003 0303 	and.w	r3, r3, #3
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d005      	beq.n	80008cc <HAL_GPIO_Init+0x40>
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f003 0303 	and.w	r3, r3, #3
 80008c8:	2b02      	cmp	r3, #2
 80008ca:	d130      	bne.n	800092e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	2203      	movs	r2, #3
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4013      	ands	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	68da      	ldr	r2, [r3, #12]
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	fa02 f303 	lsl.w	r3, r2, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4313      	orrs	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000902:	2201      	movs	r2, #1
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa02 f303 	lsl.w	r3, r2, r3
 800090a:	43db      	mvns	r3, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4013      	ands	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	091b      	lsrs	r3, r3, #4
 8000918:	f003 0201 	and.w	r2, r3, #1
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	2b03      	cmp	r3, #3
 8000938:	d017      	beq.n	800096a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	68db      	ldr	r3, [r3, #12]
 800093e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	2203      	movs	r2, #3
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	4013      	ands	r3, r2
 8000950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	4313      	orrs	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	685b      	ldr	r3, [r3, #4]
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	2b02      	cmp	r3, #2
 8000974:	d123      	bne.n	80009be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	08da      	lsrs	r2, r3, #3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3208      	adds	r2, #8
 800097e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	220f      	movs	r2, #15
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	691a      	ldr	r2, [r3, #16]
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	f003 0307 	and.w	r3, r3, #7
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	08da      	lsrs	r2, r3, #3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3208      	adds	r2, #8
 80009b8:	6939      	ldr	r1, [r7, #16]
 80009ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	2203      	movs	r2, #3
 80009ca:	fa02 f303 	lsl.w	r3, r2, r3
 80009ce:	43db      	mvns	r3, r3
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	4013      	ands	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f003 0203 	and.w	r2, r3, #3
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 8098 	beq.w	8000b30 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000a00:	4a54      	ldr	r2, [pc, #336]	; (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	089b      	lsrs	r3, r3, #2
 8000a06:	3302      	adds	r3, #2
 8000a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f003 0303 	and.w	r3, r3, #3
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	220f      	movs	r2, #15
 8000a18:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a2a:	d019      	beq.n	8000a60 <HAL_GPIO_Init+0x1d4>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a4a      	ldr	r2, [pc, #296]	; (8000b58 <HAL_GPIO_Init+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d013      	beq.n	8000a5c <HAL_GPIO_Init+0x1d0>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a49      	ldr	r2, [pc, #292]	; (8000b5c <HAL_GPIO_Init+0x2d0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d00d      	beq.n	8000a58 <HAL_GPIO_Init+0x1cc>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a48      	ldr	r2, [pc, #288]	; (8000b60 <HAL_GPIO_Init+0x2d4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d007      	beq.n	8000a54 <HAL_GPIO_Init+0x1c8>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <HAL_GPIO_Init+0x2d8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d101      	bne.n	8000a50 <HAL_GPIO_Init+0x1c4>
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	e008      	b.n	8000a62 <HAL_GPIO_Init+0x1d6>
 8000a50:	2307      	movs	r3, #7
 8000a52:	e006      	b.n	8000a62 <HAL_GPIO_Init+0x1d6>
 8000a54:	2303      	movs	r3, #3
 8000a56:	e004      	b.n	8000a62 <HAL_GPIO_Init+0x1d6>
 8000a58:	2302      	movs	r3, #2
 8000a5a:	e002      	b.n	8000a62 <HAL_GPIO_Init+0x1d6>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	e000      	b.n	8000a62 <HAL_GPIO_Init+0x1d6>
 8000a60:	2300      	movs	r3, #0
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	f002 0203 	and.w	r2, r2, #3
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	4093      	lsls	r3, r2
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a72:	4938      	ldr	r1, [pc, #224]	; (8000b54 <HAL_GPIO_Init+0x2c8>)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aa4:	4a30      	ldr	r2, [pc, #192]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ace:	4a26      	ldr	r2, [pc, #152]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4313      	orrs	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000afa:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	4313      	orrs	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b28:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <HAL_GPIO_Init+0x2dc>)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	3301      	adds	r3, #1
 8000b34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	f47f aeab 	bne.w	800089c <HAL_GPIO_Init+0x10>
  }
}
 8000b46:	bf00      	nop
 8000b48:	bf00      	nop
 8000b4a:	371c      	adds	r7, #28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40010000 	.word	0x40010000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	48000c00 	.word	0x48000c00
 8000b64:	48001000 	.word	0x48001000
 8000b68:	58000800 	.word	0x58000800

08000b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e08d      	b.n	8000c9a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d106      	bne.n	8000b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fc12 	bl	80003bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2224      	movs	r2, #36	; 0x24
 8000b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f022 0201 	bic.w	r2, r2, #1
 8000bae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685a      	ldr	r2, [r3, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bcc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d107      	bne.n	8000be6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689a      	ldr	r2, [r3, #8]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	e006      	b.n	8000bf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000bf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d108      	bne.n	8000c0e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	e007      	b.n	8000c1e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	6812      	ldr	r2, [r2, #0]
 8000c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68da      	ldr	r2, [r3, #12]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	691a      	ldr	r2, [r3, #16]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69d9      	ldr	r1, [r3, #28]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6a1a      	ldr	r2, [r3, #32]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f042 0201 	orr.w	r2, r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2220      	movs	r2, #32
 8000c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	2b20      	cmp	r3, #32
 8000cb6:	d138      	bne.n	8000d2a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d101      	bne.n	8000cc6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	e032      	b.n	8000d2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2224      	movs	r2, #36	; 0x24
 8000cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f022 0201 	bic.w	r2, r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cf4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6819      	ldr	r1, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f042 0201 	orr.w	r2, r2, #1
 8000d14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2220      	movs	r2, #32
 8000d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e000      	b.n	8000d2c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000d2a:	2302      	movs	r3, #2
  }
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b20      	cmp	r3, #32
 8000d4c:	d139      	bne.n	8000dc2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d101      	bne.n	8000d5c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d58:	2302      	movs	r3, #2
 8000d5a:	e033      	b.n	8000dc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2201      	movs	r2, #1
 8000d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2224      	movs	r2, #36	; 0x24
 8000d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d8a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f042 0201 	orr.w	r2, r2, #1
 8000dac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2220      	movs	r2, #32
 8000db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000dc2:	2302      	movs	r3, #2
  }
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	58000400 	.word	0x58000400

08000df0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_PWREx_GetVoltageRange+0x18>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	58000400 	.word	0x58000400

08000e0c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000e1e:	d101      	bne.n	8000e24 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000e20:	2301      	movs	r3, #1
 8000e22:	e000      	b.n	8000e26 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e60:	6013      	str	r3, [r2, #0]
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000e7e:	d101      	bne.n	8000e84 <LL_RCC_HSE_IsReady+0x18>
 8000e80:	2301      	movs	r3, #1
 8000e82:	e000      	b.n	8000e86 <LL_RCC_HSE_IsReady+0x1a>
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ec0:	6013      	str	r3, [r2, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ede:	d101      	bne.n	8000ee4 <LL_RCC_HSI_IsReady+0x18>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <LL_RCC_HSI_IsReady+0x1a>
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	061b      	lsls	r3, r3, #24
 8000f06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	604b      	str	r3, [r1, #4]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d101      	bne.n	8000f76 <LL_RCC_HSI48_IsReady+0x18>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <LL_RCC_HSI48_IsReady+0x1a>
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fb4:	f023 0301 	bic.w	r3, r3, #1
 8000fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8000fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ff8:	f023 0304 	bic.w	r3, r3, #4
 8000ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800100e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b02      	cmp	r3, #2
 800101c:	d101      	bne.n	8001022 <LL_RCC_LSE_IsReady+0x18>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <LL_RCC_LSE_IsReady+0x1a>
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800103a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800105c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001060:	f023 0301 	bic.w	r3, r3, #1
 8001064:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b02      	cmp	r3, #2
 8001084:	d101      	bne.n	800108a <LL_RCC_LSI1_IsReady+0x18>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <LL_RCC_LSI1_IsReady+0x1a>
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800109a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010c8:	f023 0304 	bic.w	r3, r3, #4
 80010cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80010de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d101      	bne.n	80010f2 <LL_RCC_LSI2_IsReady+0x18>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <LL_RCC_LSI2_IsReady+0x1a>
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800110e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800111a:	4313      	orrs	r3, r2
 800111c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001158:	f023 0301 	bic.w	r3, r3, #1
 800115c:	6013      	str	r3, [r2, #0]
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800116c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d101      	bne.n	800117e <LL_RCC_MSI_IsReady+0x16>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <LL_RCC_MSI_IsReady+0x18>
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800119c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	600b      	str	r3, [r1, #0]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	b083      	sub	sp, #12
 80011b6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011c2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2bb0      	cmp	r3, #176	; 0xb0
 80011c8:	d901      	bls.n	80011ce <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80011ca:	23b0      	movs	r3, #176	; 0xb0
 80011cc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80011ce:	687b      	ldr	r3, [r7, #4]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800120e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 0203 	bic.w	r2, r3, #3
 8001218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	608b      	str	r3, [r1, #8]
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 030c 	and.w	r3, r3, #12
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800124e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001258:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4313      	orrs	r3, r2
 8001260:	608b      	str	r3, [r1, #8]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800127e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80012a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012aa:	f023 020f 	bic.w	r2, r3, #15
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012b6:	4313      	orrs	r3, r2
 80012b8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800131c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001338:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001342:	4618      	mov	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800135a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800136e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800137c:	6013      	str	r3, [r2, #0]
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800138c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800139a:	d101      	bne.n	80013a0 <LL_RCC_PLL_IsReady+0x18>
 800139c:	2301      	movs	r3, #1
 800139e:	e000      	b.n	80013a2 <LL_RCC_PLL_IsReady+0x1a>
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80013b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80013ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr

080013de <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80013de:	b480      	push	{r7}
 80013e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80013fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0303 	and.w	r3, r3, #3
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001420:	d101      	bne.n	8001426 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001446:	d101      	bne.n	800144c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800145c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001460:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d101      	bne.n	8001472 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001490:	d101      	bne.n	8001496 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014b4:	d101      	bne.n	80014ba <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b08d      	sub	sp, #52	; 0x34
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e363      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 808d 	beq.w	8001602 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e8:	f7ff fea1 	bl	800122e <LL_RCC_GetSysClkSource>
 80014ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ee:	f7ff ff82 	bl	80013f6 <LL_RCC_PLL_GetMainSource>
 80014f2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80014f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x3e>
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d147      	bne.n	8001590 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	2b01      	cmp	r3, #1
 8001504:	d144      	bne.n	8001590 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e347      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001516:	f7ff fe4c 	bl	80011b2 <LL_RCC_MSI_GetRange>
 800151a:	4603      	mov	r3, r0
 800151c:	429c      	cmp	r4, r3
 800151e:	d914      	bls.n	800154a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fd05 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e336      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fe26 	bl	800118a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fe4a 	bl	80011dc <LL_RCC_MSI_SetCalibTrimming>
 8001548:	e013      	b.n	8001572 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fe1b 	bl	800118a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fe3f 	bl	80011dc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fce6 	bl	8001f34 <RCC_SetFlashLatencyFromMSIRange>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e317      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001572:	f000 fccb 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001576:	4603      	mov	r3, r0
 8001578:	4aa4      	ldr	r2, [pc, #656]	; (800180c <HAL_RCC_OscConfig+0x344>)
 800157a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800157c:	4ba4      	ldr	r3, [pc, #656]	; (8001810 <HAL_RCC_OscConfig+0x348>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f839 	bl	80005f8 <HAL_InitTick>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d039      	beq.n	8001600 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e308      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01e      	beq.n	80015d6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001598:	f7ff fdc8 	bl	800112c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800159c:	f7ff f87a 	bl	8000694 <HAL_GetTick>
 80015a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a4:	f7ff f876 	bl	8000694 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e2f5      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80015b6:	f7ff fdd7 	bl	8001168 <LL_RCC_MSI_IsReady>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f1      	beq.n	80015a4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fde0 	bl	800118a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fe04 	bl	80011dc <LL_RCC_MSI_SetCalibTrimming>
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015d6:	f7ff fdb8 	bl	800114a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015da:	f7ff f85b 	bl	8000694 <HAL_GetTick>
 80015de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e2:	f7ff f857 	bl	8000694 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e2d6      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80015f4:	f7ff fdb8 	bl	8001168 <LL_RCC_MSI_IsReady>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f1      	bne.n	80015e2 <HAL_RCC_OscConfig+0x11a>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001600:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d047      	beq.n	800169e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160e:	f7ff fe0e 	bl	800122e <LL_RCC_GetSysClkSource>
 8001612:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001614:	f7ff feef 	bl	80013f6 <LL_RCC_PLL_GetMainSource>
 8001618:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	2b08      	cmp	r3, #8
 800161e:	d005      	beq.n	800162c <HAL_RCC_OscConfig+0x164>
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	2b0c      	cmp	r3, #12
 8001624:	d108      	bne.n	8001638 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	2b03      	cmp	r3, #3
 800162a:	d105      	bne.n	8001638 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d134      	bne.n	800169e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e2b4      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0x180>
 8001642:	f7ff fbf5 	bl	8000e30 <LL_RCC_HSE_Enable>
 8001646:	e001      	b.n	800164c <HAL_RCC_OscConfig+0x184>
 8001648:	f7ff fc01 	bl	8000e4e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d012      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff f81e 	bl	8000694 <HAL_GetTick>
 8001658:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff f81a 	bl	8000694 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e299      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800166e:	f7ff fbfd 	bl	8000e6c <LL_RCC_HSE_IsReady>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f1      	beq.n	800165c <HAL_RCC_OscConfig+0x194>
 8001678:	e011      	b.n	800169e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff f80b 	bl	8000694 <HAL_GetTick>
 800167e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001682:	f7ff f807 	bl	8000694 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b64      	cmp	r3, #100	; 0x64
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e286      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001694:	f7ff fbea 	bl	8000e6c <LL_RCC_HSE_IsReady>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f1      	bne.n	8001682 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d04c      	beq.n	8001744 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016aa:	f7ff fdc0 	bl	800122e <LL_RCC_GetSysClkSource>
 80016ae:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b0:	f7ff fea1 	bl	80013f6 <LL_RCC_PLL_GetMainSource>
 80016b4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	2b04      	cmp	r3, #4
 80016ba:	d005      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d10e      	bne.n	80016e0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e266      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fc09 	bl	8000ef0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016de:	e031      	b.n	8001744 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d019      	beq.n	800171c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016e8:	f7ff fbd2 	bl	8000e90 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7fe ffd2 	bl	8000694 <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f4:	f7fe ffce 	bl	8000694 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e24d      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001706:	f7ff fbe1 	bl	8000ecc <LL_RCC_HSI_IsReady>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0f1      	beq.n	80016f4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fbeb 	bl	8000ef0 <LL_RCC_HSI_SetCalibTrimming>
 800171a:	e013      	b.n	8001744 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171c:	f7ff fbc7 	bl	8000eae <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7fe ffb8 	bl	8000694 <HAL_GetTick>
 8001724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001728:	f7fe ffb4 	bl	8000694 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e233      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800173a:	f7ff fbc7 	bl	8000ecc <LL_RCC_HSI_IsReady>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f1      	bne.n	8001728 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d106      	bne.n	800175e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a3 	beq.w	80018a4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d076      	beq.n	8001854 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	2b00      	cmp	r3, #0
 8001770:	d046      	beq.n	8001800 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001772:	f7ff fc7e 	bl	8001072 <LL_RCC_LSI1_IsReady>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d113      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800177c:	f7ff fc57 	bl	800102e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001780:	f7fe ff88 	bl	8000694 <HAL_GetTick>
 8001784:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001788:	f7fe ff84 	bl	8000694 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e203      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800179a:	f7ff fc6a 	bl	8001072 <LL_RCC_LSI1_IsReady>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f1      	beq.n	8001788 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80017a4:	f7ff fc77 	bl	8001096 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7fe ff74 	bl	8000694 <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80017b0:	f7fe ff70 	bl	8000694 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e1ef      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80017c2:	f7ff fc8a 	bl	80010da <LL_RCC_LSI2_IsReady>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f1      	beq.n	80017b0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc94 	bl	80010fe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80017d6:	f7ff fc3b 	bl	8001050 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7fe ff5b 	bl	8000694 <HAL_GetTick>
 80017de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80017e2:	f7fe ff57 	bl	8000694 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1d6      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80017f4:	f7ff fc3d 	bl	8001072 <LL_RCC_LSI1_IsReady>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1f1      	bne.n	80017e2 <HAL_RCC_OscConfig+0x31a>
 80017fe:	e051      	b.n	80018a4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001800:	f7ff fc15 	bl	800102e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001804:	f7fe ff46 	bl	8000694 <HAL_GetTick>
 8001808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800180a:	e00c      	b.n	8001826 <HAL_RCC_OscConfig+0x35e>
 800180c:	20000008 	.word	0x20000008
 8001810:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001814:	f7fe ff3e 	bl	8000694 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1bd      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001826:	f7ff fc24 	bl	8001072 <LL_RCC_LSI1_IsReady>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f1      	beq.n	8001814 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001830:	f7ff fc42 	bl	80010b8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001836:	f7fe ff2d 	bl	8000694 <HAL_GetTick>
 800183a:	4602      	mov	r2, r0
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1ac      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001848:	f7ff fc47 	bl	80010da <LL_RCC_LSI2_IsReady>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f1      	bne.n	8001836 <HAL_RCC_OscConfig+0x36e>
 8001852:	e027      	b.n	80018a4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001854:	f7ff fc30 	bl	80010b8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7fe ff1c 	bl	8000694 <HAL_GetTick>
 800185c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001860:	f7fe ff18 	bl	8000694 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b03      	cmp	r3, #3
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e197      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001872:	f7ff fc32 	bl	80010da <LL_RCC_LSI2_IsReady>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f1      	bne.n	8001860 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800187c:	f7ff fbe8 	bl	8001050 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001880:	f7fe ff08 	bl	8000694 <HAL_GetTick>
 8001884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001888:	f7fe ff04 	bl	8000694 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e183      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800189a:	f7ff fbea 	bl	8001072 <LL_RCC_LSI1_IsReady>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f1      	bne.n	8001888 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d05b      	beq.n	8001968 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b0:	4ba7      	ldr	r3, [pc, #668]	; (8001b50 <HAL_RCC_OscConfig+0x688>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d114      	bne.n	80018e6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80018bc:	f7ff fa88 	bl	8000dd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c0:	f7fe fee8 	bl	8000694 <HAL_GetTick>
 80018c4:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c8:	f7fe fee4 	bl	8000694 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e163      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018da:	4b9d      	ldr	r3, [pc, #628]	; (8001b50 <HAL_RCC_OscConfig+0x688>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d102      	bne.n	80018f4 <HAL_RCC_OscConfig+0x42c>
 80018ee:	f7ff fb48 	bl	8000f82 <LL_RCC_LSE_Enable>
 80018f2:	e00c      	b.n	800190e <HAL_RCC_OscConfig+0x446>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b05      	cmp	r3, #5
 80018fa:	d104      	bne.n	8001906 <HAL_RCC_OscConfig+0x43e>
 80018fc:	f7ff fb63 	bl	8000fc6 <LL_RCC_LSE_EnableBypass>
 8001900:	f7ff fb3f 	bl	8000f82 <LL_RCC_LSE_Enable>
 8001904:	e003      	b.n	800190e <HAL_RCC_OscConfig+0x446>
 8001906:	f7ff fb4d 	bl	8000fa4 <LL_RCC_LSE_Disable>
 800190a:	f7ff fb6d 	bl	8000fe8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d014      	beq.n	8001940 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7fe febd 	bl	8000694 <HAL_GetTick>
 800191a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7fe feb9 	bl	8000694 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e136      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001934:	f7ff fb69 	bl	800100a <LL_RCC_LSE_IsReady>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0ef      	beq.n	800191e <HAL_RCC_OscConfig+0x456>
 800193e:	e013      	b.n	8001968 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7fe fea8 	bl	8000694 <HAL_GetTick>
 8001944:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001946:	e00a      	b.n	800195e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001948:	f7fe fea4 	bl	8000694 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e121      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800195e:	f7ff fb54 	bl	800100a <LL_RCC_LSE_IsReady>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1ef      	bne.n	8001948 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02c      	beq.n	80019ce <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	2b00      	cmp	r3, #0
 800197a:	d014      	beq.n	80019a6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800197c:	f7ff facd 	bl	8000f1a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7fe fe88 	bl	8000694 <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001988:	f7fe fe84 	bl	8000694 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e103      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800199a:	f7ff fae0 	bl	8000f5e <LL_RCC_HSI48_IsReady>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0f1      	beq.n	8001988 <HAL_RCC_OscConfig+0x4c0>
 80019a4:	e013      	b.n	80019ce <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a6:	f7ff fac9 	bl	8000f3c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7fe fe73 	bl	8000694 <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019b2:	f7fe fe6f 	bl	8000694 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e0ee      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80019c4:	f7ff facb 	bl	8000f5e <LL_RCC_HSI48_IsReady>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f1      	bne.n	80019b2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 80e4 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d8:	f7ff fc29 	bl	800122e <LL_RCC_GetSysClkSource>
 80019dc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	f040 80b4 	bne.w	8001b58 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 0203 	and.w	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d123      	bne.n	8001a46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d11c      	bne.n	8001a46 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	0a1b      	lsrs	r3, r3, #8
 8001a10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d114      	bne.n	8001a46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d10d      	bne.n	8001a46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d05d      	beq.n	8001b02 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d058      	beq.n	8001afe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0a1      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a5e:	f7ff fc84 	bl	800136a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a62:	f7fe fe17 	bl	8000694 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a68:	e008      	b.n	8001a7c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6a:	f7fe fe13 	bl	8000694 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e092      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1ef      	bne.n	8001a6a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_RCC_OscConfig+0x68c>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a9c:	4311      	orrs	r1, r2
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aa2:	0212      	lsls	r2, r2, #8
 8001aa4:	4311      	orrs	r1, r2
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ab0:	4311      	orrs	r1, r2
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001abc:	4313      	orrs	r3, r2
 8001abe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ac0:	f7ff fc44 	bl	800134c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ace:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ad4:	f7fe fdde 	bl	8000694 <HAL_GetTick>
 8001ad8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe fdda 	bl	8000694 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e059      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ef      	beq.n	8001adc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	e050      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e04f      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d147      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b10:	f7ff fc1c 	bl	800134c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b24:	f7fe fdb6 	bl	8000694 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7fe fdb2 	bl	8000694 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e031      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ef      	beq.n	8001b2c <HAL_RCC_OscConfig+0x664>
 8001b4c:	e028      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6d8>
 8001b4e:	bf00      	nop
 8001b50:	58000400 	.word	0x58000400
 8001b54:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d01e      	beq.n	8001b9c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	f7ff fc04 	bl	800136a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7fe fd97 	bl	8000694 <HAL_GetTick>
 8001b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7fe fd93 	bl	8000694 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e012      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ef      	bne.n	8001b6a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_OscConfig+0x6e4>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	60cb      	str	r3, [r1, #12]
 8001b9a:	e001      	b.n	8001ba0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3734      	adds	r7, #52	; 0x34
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	eefefffc 	.word	0xeefefffc

08001bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e12d      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <HAL_RCC_ClockConfig+0x278>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d91b      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b95      	ldr	r3, [pc, #596]	; (8001e28 <HAL_RCC_ClockConfig+0x278>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	4993      	ldr	r1, [pc, #588]	; (8001e28 <HAL_RCC_ClockConfig+0x278>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be2:	f7fe fd57 	bl	8000694 <HAL_GetTick>
 8001be6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001bea:	f7fe fd53 	bl	8000694 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e111      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfc:	4b8a      	ldr	r3, [pc, #552]	; (8001e28 <HAL_RCC_ClockConfig+0x278>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d1ef      	bne.n	8001bea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d016      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fb13 	bl	8001246 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c20:	f7fe fd38 	bl	8000694 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c28:	f7fe fd34 	bl	8000694 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0f2      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001c3a:	f7ff fbe8 	bl	800140e <LL_RCC_IsActiveFlag_HPRE>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f1      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d016      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb0a 	bl	800126e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c5a:	f7fe fd1b 	bl	8000694 <HAL_GetTick>
 8001c5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c62:	f7fe fd17 	bl	8000694 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0d5      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c74:	f7ff fbdd 	bl	8001432 <LL_RCC_IsActiveFlag_C2HPRE>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f1      	beq.n	8001c62 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fb03 	bl	800129a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c94:	f7fe fcfe 	bl	8000694 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c9c:	f7fe fcfa 	bl	8000694 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0b8      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001cae:	f7ff fbd3 	bl	8001458 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f1      	beq.n	8001c9c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d016      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fafd 	bl	80012c8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cce:	f7fe fce1 	bl	8000694 <HAL_GetTick>
 8001cd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cd6:	f7fe fcdd 	bl	8000694 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e09b      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ce8:	f7ff fbc9 	bl	800147e <LL_RCC_IsActiveFlag_PPRE1>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f1      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d017      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff faf3 	bl	80012f0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d0a:	f7fe fcc3 	bl	8000694 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d12:	f7fe fcbf 	bl	8000694 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e07d      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001d24:	f7ff fbbd 	bl	80014a2 <LL_RCC_IsActiveFlag_PPRE2>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f1      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d043      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d106      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001d42:	f7ff f893 	bl	8000e6c <LL_RCC_HSE_IsReady>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d11e      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e067      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001d58:	f7ff fb16 	bl	8001388 <LL_RCC_PLL_IsReady>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d113      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e05c      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001d6e:	f7ff f9fb 	bl	8001168 <LL_RCC_MSI_IsReady>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d108      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e051      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001d7c:	f7ff f8a6 	bl	8000ecc <LL_RCC_HSI_IsReady>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e04a      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fa39 	bl	8001206 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d94:	f7fe fc7e 	bl	8000694 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7fe fc7a 	bl	8000694 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e036      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	f7ff fa3c 	bl	800122e <LL_RCC_GetSysClkSource>
 8001db6:	4602      	mov	r2, r0
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d1ec      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_ClockConfig+0x278>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d21b      	bcs.n	8001e08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_ClockConfig+0x278>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f023 0207 	bic.w	r2, r3, #7
 8001dd8:	4913      	ldr	r1, [pc, #76]	; (8001e28 <HAL_RCC_ClockConfig+0x278>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de0:	f7fe fc58 	bl	8000694 <HAL_GetTick>
 8001de4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001de8:	f7fe fc54 	bl	8000694 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e012      	b.n	8001e20 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <HAL_RCC_ClockConfig+0x278>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ef      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e08:	f000 f880 	bl	8001f0c <HAL_RCC_GetHCLKFreq>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_RCC_ClockConfig+0x27c>)
 8001e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001e12:	f7fe fc4b 	bl	80006ac <HAL_GetTickPrio>
 8001e16:	4603      	mov	r3, r0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbed 	bl	80005f8 <HAL_InitTick>
 8001e1e:	4603      	mov	r3, r0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	58004000 	.word	0x58004000
 8001e2c:	20000008 	.word	0x20000008

08001e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e36:	f7ff f9fa 	bl	800122e <LL_RCC_GetSysClkSource>
 8001e3a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10a      	bne.n	8001e58 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001e42:	f7ff f9b6 	bl	80011b2 <LL_RCC_MSI_GetRange>
 8001e46:	4603      	mov	r3, r0
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4a2b      	ldr	r2, [pc, #172]	; (8001efc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e04b      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e045      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d10a      	bne.n	8001e80 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e6a:	f7fe ffcf 	bl	8000e0c <LL_RCC_HSE_IsEnabledDiv2>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d102      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	e03a      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e037      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001e80:	f7ff fab9 	bl	80013f6 <LL_RCC_PLL_GetMainSource>
 8001e84:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d003      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x64>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d003      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x6a>
 8001e92:	e00d      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e96:	60bb      	str	r3, [r7, #8]
        break;
 8001e98:	e015      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e9a:	f7fe ffb7 	bl	8000e0c <LL_RCC_HSE_IsEnabledDiv2>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d102      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001ea6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001ea8:	e00d      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001eac:	60bb      	str	r3, [r7, #8]
        break;
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001eb0:	f7ff f97f 	bl	80011b2 <LL_RCC_MSI_GetRange>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec2:	60bb      	str	r3, [r7, #8]
        break;
 8001ec4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8001ec6:	f7ff fa71 	bl	80013ac <LL_RCC_PLL_GetN>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	fb03 f402 	mul.w	r4, r3, r2
 8001ed2:	f7ff fa84 	bl	80013de <LL_RCC_PLL_GetDivider>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	3301      	adds	r3, #1
 8001edc:	fbb4 f4f3 	udiv	r4, r4, r3
 8001ee0:	f7ff fa71 	bl	80013c6 <LL_RCC_PLL_GetR>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	0f5b      	lsrs	r3, r3, #29
 8001ee8:	3301      	adds	r3, #1
 8001eea:	fbb4 f3f3 	udiv	r3, r4, r3
 8001eee:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}
 8001efa:	bf00      	nop
 8001efc:	080029c0 	.word	0x080029c0
 8001f00:	00f42400 	.word	0x00f42400
 8001f04:	003d0900 	.word	0x003d0900
 8001f08:	007a1200 	.word	0x007a1200

08001f0c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f0c:	b598      	push	{r3, r4, r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001f10:	f7ff ff8e 	bl	8001e30 <HAL_RCC_GetSysClockFreq>
 8001f14:	4604      	mov	r4, r0
 8001f16:	f7ff f9ff 	bl	8001318 <LL_RCC_GetAHBPrescaler>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x24>)
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd98      	pop	{r3, r4, r7, pc}
 8001f30:	08002980 	.word	0x08002980

08001f34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2bb0      	cmp	r3, #176	; 0xb0
 8001f40:	d903      	bls.n	8001f4a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	e007      	b.n	8001f5a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8001f5a:	f7ff f9e9 	bl	8001330 <LL_RCC_GetAHB4Prescaler>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8001f78:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7c:	0c9c      	lsrs	r4, r3, #18
 8001f7e:	f7fe ff37 	bl	8000df0 <HAL_PWREx_GetVoltageRange>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4619      	mov	r1, r3
 8001f86:	4620      	mov	r0, r4
 8001f88:	f000 f80c 	bl	8001fa4 <RCC_SetFlashLatency>
 8001f8c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd90      	pop	{r4, r7, pc}
 8001f96:	bf00      	nop
 8001f98:	080029c0 	.word	0x080029c0
 8001f9c:	08002980 	.word	0x08002980
 8001fa0:	431bde83 	.word	0x431bde83

08001fa4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b093      	sub	sp, #76	; 0x4c
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <RCC_SetFlashLatency+0xe8>)
 8001fb0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001fb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8001fba:	4a35      	ldr	r2, [pc, #212]	; (8002090 <RCC_SetFlashLatency+0xec>)
 8001fbc:	f107 031c 	add.w	r3, r7, #28
 8001fc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fc2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8001fc6:	4b33      	ldr	r3, [pc, #204]	; (8002094 <RCC_SetFlashLatency+0xf0>)
 8001fc8:	f107 040c 	add.w	r4, r7, #12
 8001fcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fdc:	d11a      	bne.n	8002014 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	643b      	str	r3, [r7, #64]	; 0x40
 8001fe2:	e013      	b.n	800200c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8001fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	3348      	adds	r3, #72	; 0x48
 8001fea:	443b      	add	r3, r7
 8001fec:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d807      	bhi.n	8002006 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	3348      	adds	r3, #72	; 0x48
 8001ffc:	443b      	add	r3, r7
 8001ffe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002002:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002004:	e020      	b.n	8002048 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002008:	3301      	adds	r3, #1
 800200a:	643b      	str	r3, [r7, #64]	; 0x40
 800200c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200e:	2b03      	cmp	r3, #3
 8002010:	d9e8      	bls.n	8001fe4 <RCC_SetFlashLatency+0x40>
 8002012:	e019      	b.n	8002048 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002014:	2300      	movs	r3, #0
 8002016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002018:	e013      	b.n	8002042 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800201a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	3348      	adds	r3, #72	; 0x48
 8002020:	443b      	add	r3, r7
 8002022:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d807      	bhi.n	800203c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800202c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	3348      	adds	r3, #72	; 0x48
 8002032:	443b      	add	r3, r7
 8002034:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800203a:	e005      	b.n	8002048 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203e:	3301      	adds	r3, #1
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002044:	2b02      	cmp	r3, #2
 8002046:	d9e8      	bls.n	800201a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <RCC_SetFlashLatency+0xf4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 0207 	bic.w	r2, r3, #7
 8002050:	4911      	ldr	r1, [pc, #68]	; (8002098 <RCC_SetFlashLatency+0xf4>)
 8002052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002058:	f7fe fb1c 	bl	8000694 <HAL_GetTick>
 800205c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800205e:	e008      	b.n	8002072 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002060:	f7fe fb18 	bl	8000694 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e007      	b.n	8002082 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <RCC_SetFlashLatency+0xf4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800207c:	429a      	cmp	r2, r3
 800207e:	d1ef      	bne.n	8002060 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	374c      	adds	r7, #76	; 0x4c
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}
 800208a:	bf00      	nop
 800208c:	08002954 	.word	0x08002954
 8002090:	08002964 	.word	0x08002964
 8002094:	08002970 	.word	0x08002970
 8002098:	58004000 	.word	0x58004000

0800209c <LL_RCC_LSE_IsEnabled>:
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <LL_RCC_LSE_IsEnabled+0x18>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <LL_RCC_LSE_IsEnabled+0x1a>
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_RCC_LSE_IsReady>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d101      	bne.n	80020d8 <LL_RCC_LSE_IsReady+0x18>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <LL_RCC_LSE_IsReady+0x1a>
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_RCC_SetRFWKPClockSource>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_RCC_SetSMPSClockSource>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	f023 0203 	bic.w	r2, r3, #3
 8002122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_RCC_SetSMPSPrescaler>:
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800214a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4313      	orrs	r3, r2
 8002152:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_RCC_SetUSARTClockSource>:
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f023 0203 	bic.w	r2, r3, #3
 8002174:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_RCC_SetLPUARTClockSource>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_RCC_SetI2CClockSource>:
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80021d0:	43db      	mvns	r3, r3
 80021d2:	401a      	ands	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80021dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_RCC_SetLPTIMClockSource>:
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80021fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0c1b      	lsrs	r3, r3, #16
 8002206:	041b      	lsls	r3, r3, #16
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	041b      	lsls	r3, r3, #16
 8002210:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <LL_RCC_SetSAIClockSource>:
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002236:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800223a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_RCC_SetRNGClockSource>:
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800225a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_RCC_SetCLK48ClockSource>:
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_RCC_SetUSBClockSource>:
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffe3 	bl	800227e <LL_RCC_SetCLK48ClockSource>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <LL_RCC_SetADCClockSource>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80022c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_RCC_SetRTCClockSource>:
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4313      	orrs	r3, r2
 8002308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_RCC_GetRTCClockSource>:
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800231c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <LL_RCC_ForceBackupDomainReset>:
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_RCC_PLLSAI1_Enable>:
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002388:	6013      	str	r3, [r2, #0]
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_RCC_PLLSAI1_Disable>:
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023a6:	6013      	str	r3, [r2, #0]
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <LL_RCC_PLLSAI1_IsReady>:
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80023b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c4:	d101      	bne.n	80023ca <LL_RCC_PLLSAI1_IsReady+0x18>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80023ca:	2300      	movs	r3, #0
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b088      	sub	sp, #32
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80023de:	2300      	movs	r3, #0
 80023e0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80023e2:	2300      	movs	r3, #0
 80023e4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d034      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023fa:	d021      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80023fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002400:	d81b      	bhi.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002406:	d01d      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800240c:	d815      	bhi.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002416:	d110      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002426:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002428:	e00d      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f947 	bl	80026c2 <RCCEx_PLLSAI1_ConfigNP>
 8002434:	4603      	mov	r3, r0
 8002436:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002438:	e005      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	77fb      	strb	r3, [r7, #31]
        break;
 800243e:	e002      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002440:	bf00      	nop
 8002442:	e000      	b.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002446:	7ffb      	ldrb	r3, [r7, #31]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d105      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fee8 	bl	8002226 <LL_RCC_SetSAIClockSource>
 8002456:	e001      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002458:	7ffb      	ldrb	r3, [r7, #31]
 800245a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002464:	2b00      	cmp	r3, #0
 8002466:	d046      	beq.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002468:	f7ff ff56 	bl	8002318 <LL_RCC_GetRTCClockSource>
 800246c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	429a      	cmp	r2, r3
 8002476:	d03c      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002478:	f7fe fcaa 	bl	8000dd0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d105      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff30 	bl	80022ec <LL_RCC_SetRTCClockSource>
 800248c:	e02e      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002498:	f7ff ff4b 	bl	8002332 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800249c:	f7ff ff5a 	bl	8002354 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80024ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80024b8:	f7ff fdf0 	bl	800209c <LL_RCC_LSE_IsEnabled>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d114      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024c2:	f7fe f8e7 	bl	8000694 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80024c8:	e00b      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe f8e3 	bl	8000694 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d902      	bls.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	77fb      	strb	r3, [r7, #31]
              break;
 80024e0:	e004      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80024e2:	f7ff fded 	bl	80020c0 <LL_RCC_LSE_IsReady>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80024ec:	7ffb      	ldrb	r3, [r7, #31]
 80024ee:	77bb      	strb	r3, [r7, #30]
 80024f0:	e001      	b.n	80024f6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
 80024f4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fe2a 	bl	8002160 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff fe35 	bl	800218c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fe5d 	bl	80021f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fe52 	bl	80021f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fe2a 	bl	80021b8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fe1f 	bl	80021b8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d022      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fe8d 	bl	80022aa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002594:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002598:	d107      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025a8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b2:	d10b      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 f8dd 	bl	8002778 <RCCEx_PLLSAI1_ConfigNQ>
 80025be:	4603      	mov	r3, r0
 80025c0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80025c8:	7ffb      	ldrb	r3, [r7, #31]
 80025ca:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d02b      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e0:	d008      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80025ea:	d003      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fe2a 	bl	8002252 <LL_RCC_SetRNGClockSource>
 80025fe:	e00a      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	2000      	movs	r0, #0
 800260c:	f7ff fe21 	bl	8002252 <LL_RCC_SetRNGClockSource>
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff fe34 	bl	800227e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800261e:	d107      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	2b00      	cmp	r3, #0
 800263a:	d022      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff fe3d 	bl	80022c0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800264e:	d107      	bne.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800265a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002668:	d10b      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3304      	adds	r3, #4
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f8dd 	bl	800282e <RCCEx_PLLSAI1_ConfigNR>
 8002674:	4603      	mov	r3, r0
 8002676:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002678:	7ffb      	ldrb	r3, [r7, #31]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800267e:	7ffb      	ldrb	r3, [r7, #31]
 8002680:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fd26 	bl	80020e4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fd45 	bl	8002138 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fd2c 	bl	8002110 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80026b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3720      	adds	r7, #32
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80026ce:	f7ff fe61 	bl	8002394 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80026d2:	f7fd ffdf 	bl	8000694 <HAL_GetTick>
 80026d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80026d8:	e009      	b.n	80026ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026da:	f7fd ffdb 	bl	8000694 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d902      	bls.n	80026ee <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	73fb      	strb	r3, [r7, #15]
      break;
 80026ec:	e004      	b.n	80026f8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80026ee:	f7ff fe60 	bl	80023b2 <LL_RCC_PLLSAI1_IsReady>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f0      	bne.n	80026da <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d137      	bne.n	800276e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80026fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002712:	4313      	orrs	r3, r2
 8002714:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002728:	4313      	orrs	r3, r2
 800272a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800272c:	f7ff fe23 	bl	8002376 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002730:	f7fd ffb0 	bl	8000694 <HAL_GetTick>
 8002734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002736:	e009      	b.n	800274c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002738:	f7fd ffac 	bl	8000694 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d902      	bls.n	800274c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	73fb      	strb	r3, [r7, #15]
        break;
 800274a:	e004      	b.n	8002756 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800274c:	f7ff fe31 	bl	80023b2 <LL_RCC_PLLSAI1_IsReady>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d1f0      	bne.n	8002738 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d108      	bne.n	800276e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800276a:	4313      	orrs	r3, r2
 800276c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002784:	f7ff fe06 	bl	8002394 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002788:	f7fd ff84 	bl	8000694 <HAL_GetTick>
 800278c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800278e:	e009      	b.n	80027a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002790:	f7fd ff80 	bl	8000694 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d902      	bls.n	80027a4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	73fb      	strb	r3, [r7, #15]
      break;
 80027a2:	e004      	b.n	80027ae <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80027a4:	f7ff fe05 	bl	80023b2 <LL_RCC_PLLSAI1_IsReady>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d137      	bne.n	8002824 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80027b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027c8:	4313      	orrs	r3, r2
 80027ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027de:	4313      	orrs	r3, r2
 80027e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80027e2:	f7ff fdc8 	bl	8002376 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e6:	f7fd ff55 	bl	8000694 <HAL_GetTick>
 80027ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80027ec:	e009      	b.n	8002802 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027ee:	f7fd ff51 	bl	8000694 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d902      	bls.n	8002802 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	73fb      	strb	r3, [r7, #15]
        break;
 8002800:	e004      	b.n	800280c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002802:	f7ff fdd6 	bl	80023b2 <LL_RCC_PLLSAI1_IsReady>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d1f0      	bne.n	80027ee <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800280c:	7bfb      	ldrb	r3, [r7, #15]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d108      	bne.n	8002824 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002820:	4313      	orrs	r3, r2
 8002822:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800283a:	f7ff fdab 	bl	8002394 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800283e:	f7fd ff29 	bl	8000694 <HAL_GetTick>
 8002842:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002844:	e009      	b.n	800285a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002846:	f7fd ff25 	bl	8000694 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d902      	bls.n	800285a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e004      	b.n	8002864 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800285a:	f7ff fdaa 	bl	80023b2 <LL_RCC_PLLSAI1_IsReady>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d137      	bne.n	80028da <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	021b      	lsls	r3, r3, #8
 800287a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287e:	4313      	orrs	r3, r2
 8002880:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002894:	4313      	orrs	r3, r2
 8002896:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002898:	f7ff fd6d 	bl	8002376 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fd fefa 	bl	8000694 <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028a2:	e009      	b.n	80028b8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028a4:	f7fd fef6 	bl	8000694 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d902      	bls.n	80028b8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	73fb      	strb	r3, [r7, #15]
        break;
 80028b6:	e004      	b.n	80028c2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80028b8:	f7ff fd7b 	bl	80023b2 <LL_RCC_PLLSAI1_IsReady>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d1f0      	bne.n	80028a4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d108      	bne.n	80028da <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d6:	4313      	orrs	r3, r2
 80028d8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80028da:	7bfb      	ldrb	r3, [r7, #15]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <memset>:
 80028e4:	4402      	add	r2, r0
 80028e6:	4603      	mov	r3, r0
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d100      	bne.n	80028ee <memset+0xa>
 80028ec:	4770      	bx	lr
 80028ee:	f803 1b01 	strb.w	r1, [r3], #1
 80028f2:	e7f9      	b.n	80028e8 <memset+0x4>

080028f4 <__libc_init_array>:
 80028f4:	b570      	push	{r4, r5, r6, lr}
 80028f6:	4d0d      	ldr	r5, [pc, #52]	; (800292c <__libc_init_array+0x38>)
 80028f8:	4c0d      	ldr	r4, [pc, #52]	; (8002930 <__libc_init_array+0x3c>)
 80028fa:	1b64      	subs	r4, r4, r5
 80028fc:	10a4      	asrs	r4, r4, #2
 80028fe:	2600      	movs	r6, #0
 8002900:	42a6      	cmp	r6, r4
 8002902:	d109      	bne.n	8002918 <__libc_init_array+0x24>
 8002904:	4d0b      	ldr	r5, [pc, #44]	; (8002934 <__libc_init_array+0x40>)
 8002906:	4c0c      	ldr	r4, [pc, #48]	; (8002938 <__libc_init_array+0x44>)
 8002908:	f000 f818 	bl	800293c <_init>
 800290c:	1b64      	subs	r4, r4, r5
 800290e:	10a4      	asrs	r4, r4, #2
 8002910:	2600      	movs	r6, #0
 8002912:	42a6      	cmp	r6, r4
 8002914:	d105      	bne.n	8002922 <__libc_init_array+0x2e>
 8002916:	bd70      	pop	{r4, r5, r6, pc}
 8002918:	f855 3b04 	ldr.w	r3, [r5], #4
 800291c:	4798      	blx	r3
 800291e:	3601      	adds	r6, #1
 8002920:	e7ee      	b.n	8002900 <__libc_init_array+0xc>
 8002922:	f855 3b04 	ldr.w	r3, [r5], #4
 8002926:	4798      	blx	r3
 8002928:	3601      	adds	r6, #1
 800292a:	e7f2      	b.n	8002912 <__libc_init_array+0x1e>
 800292c:	08002a00 	.word	0x08002a00
 8002930:	08002a00 	.word	0x08002a00
 8002934:	08002a00 	.word	0x08002a00
 8002938:	08002a04 	.word	0x08002a04

0800293c <_init>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr

08002948 <_fini>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	bf00      	nop
 800294c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294e:	bc08      	pop	{r3}
 8002950:	469e      	mov	lr, r3
 8002952:	4770      	bx	lr
